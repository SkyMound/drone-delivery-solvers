/** 
 * 
 */
package drone_delivery.solver
import io.sarl.api.core.Initialize
import io.sarl.api.core.Logging
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Schedules
import io.sarl.api.core.Lifecycle
import java.util.concurrent.ConcurrentHashMap
import java.util.UUID
import java.util.List

/** 
 * 
 */
agent Depot {
	uses Logging, DefaultContextInteractions, Schedules, Lifecycle

	var environment : UUID
	
	var position : Vector2d
	var drones : ConcurrentHashMap<UUID,PerceivedDroneBody>
	var todeliver : List<Parcel>
	var parcelToCreate : List<Parcel>
	

	on Initialize {
	// Depot init parameters : UUID envt, Vector2d initialPosition, String name,Listparcels
	if (occurrence.parameters.size > 4) {
		if (occurrence.parameters.get(0) instanceof UUID) {
			environment = occurrence.parameters.get(0) as UUID
		}

		if (occurrence.parameters.get(1) instanceof Vector2d) {
			position = occurrence.parameters.get(1) as Vector2d
		}
		if (occurrence.parameters.get(2) instanceof String) {
			loggingName = occurrence.parameters.get(2) as String
		}
		if (occurrence.parameters.get(3) instanceof List) {
			parcelToCreate = occurrence.parameters.get(3) as List<Parcel>
		}
		if (occurrence.parameters.get(4) instanceof ConcurrentHashMap) {
			drones = occurrence.parameters.get(4) as ConcurrentHashMap<UUID, PerceivedDroneBody>
		}
		
//		if (occurrence.parameters.get(3) instanceof List) {
//			var cityFilename = occurrence.parameters.get(3) as List<Parcel>
//		}
//		if (occurrence.parameters.get(4) instanceof List) {
//			var parcelFilename = occurrence.parameters.get(4) as String
//		}
		}
		this.todeliver = newArrayList
	}

	on Perception {
		synchronized(drones){
			drones = occurrence.perceivedAgentBody
			
			while (this.parcelToCreate.get(0).ordertime< occurrence.time){
				todeliver.add(this.parcelToCreate.remove(0))
			}
			if (!todeliver.empty){
				for (p : todeliver){
					var droneToAffect = affecterDrone(p)
					if (droneToAffect !== null ){
						emit(new AffectOrder(p))[it.ID == droneToAffect]
					}
				}
			}
			in(50)[
				emit(new UpdateAction(this.drones))
			]
		}		
	}	
	
	on ValidateOrderReception{
		
	}

	def affecterDrone(parcel : Parcel){
		var bestDrone = this.drones.values.get(0)
		var isreallyBest = false
		for (drone : this.drones.values){
			if(drone.objectiv == Objectiv.Charge){
				if (drone.battery > energyneeded(parcel, drone.position)) {
					if(isreallyBest){
						if (drone.battery < bestDrone.battery) {
							bestDrone = drone
						}
					}
					else
					{
						bestDrone = drone
						isreallyBest = true
					}
				}
			}
		}
		
		return bestDrone.owner
	}
	
	def energyneeded(p : Parcel, dronePosition : Vector2d) {
		var d_max_charge = 15 * 4 / (4 + p.weight)
		var distance = Math.sqrt(Math.pow(p.housePos.x - dronePosition.x, 2) +
			Math.pow(p.housePos.y - dronePosition.y, 2));
		var perte_energie = distance * 100 / d_max_charge + distance * 100 / 15

		return perte_energie + (4 + p.weight) * 2 / 4 + 2
	}
}
