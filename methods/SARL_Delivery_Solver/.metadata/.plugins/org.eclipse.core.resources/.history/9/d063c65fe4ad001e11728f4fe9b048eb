package drone_delivery.solver

import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import java.util.Collection
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import java.util.Vector

enum Objectiv {
	GoLiv,
	BackLiv,
	Charge
}

/** 
 * 
 * 
 */
agent Drone {
	uses Logging, DefaultContextInteractions, Schedules, Lifecycle

	// ID of the environmental agent
	var environment : UUID

	var position : Vector2d

	var speed : Vector2d
	var battery : float 
	var weight : float
	
	var targetPos : Vector2d
	
	var objectiv : Objectiv
	
	var parcel : Parcel

	on Initialize {
		// Drones init parameters : UUID envt, Vector2d initialPosition, String droneName
		if (occurrence.parameters.size > 2) {
			if (occurrence.parameters.get(0) instanceof UUID) {
				environment = occurrence.parameters.get(0) as UUID
			}

			if (occurrence.parameters.get(1) instanceof Vector2d) {
				position = occurrence.parameters.get(2) as Vector2d
			}
			if (occurrence.parameters.get(2) instanceof String) {
				loggingName = occurrence.parameters.get(4) as String
			}
			//initial speed null
			speed = new Vector2d
			parcel = null
			objectiv = Objectiv.Charge
			targetPos = null
		}
		if (Settings::isLogActivated) {
			"Boids activated".info
		}
		
	}
	
	def closeEnoughToTarget(v1 : Vector2d, v2 : Vector2d) {
		var distanceMin = Settings::distMinLiv
		var distance = Math.sqrt(Math.pow(v2.x - v1.x, 2) + Math.pow(v2.y - v1.y, 2));
		return distance <= distanceMin;
	}
	
	on UpdateAction {
		var myBody = occurrence.perceivedAgentBody.get(ID)
		if ((myBody !== null) && (myBody.owner == this.ID)) {
			// Update boids' speed and position according to the new environmental data
			this.position = myBody.position
			this.speed = myBody.vitesse
		}

		in(Settings::pause) [
		
		if (this.objectiv == Objectiv.Charge) {
			if(this.battery <= 100- Settings::SecondsPerCycle * Settings::ChargePerSec){
				this.battery += Settings::SecondsPerCycle * Settings::ChargePerSec
			}
			emit(new Action => [influence = new Vector2d])[it.ID == this.environment]
		}
		
		else if (this.objectiv == Objectiv.BackLiv) {
				this.battery -= Settings::SecondsPerCycle * Settings::BatteryLostPerSec
				
				if (closeEnoughToTarget(this.position, this.targetPos)) {
					this.objectiv = Objectiv.Charge
					this.targetPos = null
					emit(new Action => [influence = new Vector2d])[it.ID == this.environment]
				}
				else {
					emit(new Action => [influence = moveTo(this.targetPos)])[it.ID == this.environment]
				}
		} 
		
		else if (this.objectiv == Objectiv.GoLiv) {
			this.battery -= Settings::SecondsPerCycle * Settings::BatteryLostPerSec
			if (closeEnoughToTarget(this.position, this.targetPos)) {
				this.objectiv = Objectiv.BackLiv
				this.targetPos = occurrence.source.position
				this.parcel = null
				emit(new Action => [influence = moveTo(this.targetPos)])[it.ID == this.environment]
			} 
			else {
				emit(new Action => [influence = moveTo(this.targetPos)])[it.ID == this.environment]
			}
		}
		]
		
		
	}
	
	def moveTo(targetPos : Vector2d){
		return new Vector2d
	}
}
