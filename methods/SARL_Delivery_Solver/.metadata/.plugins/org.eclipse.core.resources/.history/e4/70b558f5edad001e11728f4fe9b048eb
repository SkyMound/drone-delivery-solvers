/** 
 * 
 */
package drone_delivery.solver
import io.sarl.api.core.Initialize
import io.sarl.api.core.Logging
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Schedules
import io.sarl.api.core.Lifecycle
import java.util.concurrent.ConcurrentHashMap
import java.util.UUID
import java.util.List

/** 
 * 
 */
agent Depot {
	uses Logging, DefaultContextInteractions, Schedules, Lifecycle

	var environment : UUID
	
	var position : Vector2d
	var drones : ConcurrentHashMap<UUID,PerceivedDroneBody>
	var todeliver : List<Parcel>
	var parcelToCreate : List<Parcel>
	

	on Initialize {
	// Depot init parameters : UUID envt, Vector2d initialPosition, String name,cityfile name
	if (occurrence.parameters.size > 2) {
		if (occurrence.parameters.get(0) instanceof UUID) {
			environment = occurrence.parameters.get(0) as UUID
		}

		if (occurrence.parameters.get(1) instanceof Vector2d) {
			position = occurrence.parameters.get(1) as Vector2d
		}
		if (occurrence.parameters.get(2) instanceof String) {
			loggingName = occurrence.parameters.get(2) as String
		}
		if (occurrence.parameters.get(3) instanceof List) {
			parcelToCreate = occurrence.parameters.get(3) as List<Parcel>
		}
		
//		if (occurrence.parameters.get(3) instanceof List) {
//			var cityFilename = occurrence.parameters.get(3) as List<Parcel>
//		}
//		if (occurrence.parameters.get(4) instanceof List) {
//			var parcelFilename = occurrence.parameters.get(4) as String
//		}
		}
		this.drones = null
		this.position=Settings::DepotPos
		this.todeliver = newArrayList
	}

	on Perception {
		var drones = occurrence.perceivedAgentBody
		
		while (this.parcelToCreate.get(0).getOrderTime()< occurrence.time){
			todeliver.add(this.parcelToCreate.remove(0))
		}
		if (!todeliver.empty){
			for (parcel : todeliver){
				var droneToAffect = affecterDrone(parcel)
				if (droneToAffect !== null )
			}
		}
		
		
	}	

	def affecterDrone(parcel : Parcel){
		var bestDrone = null
		for (drone : this.drones.values){
			if(drone.objectiv == Objectiv.Charge){
				if (drone.battery > energyneeded(parcel.getHousePos(), drone.position))
				
				if (bestDrone===null){
					bestDrone = drone
				}
				else {
					if (drone.battery<bestDrone.battery){
						bestDrone=drone
					}
				}
			}
		}
		
		return bestDrone.owner
	}
}
