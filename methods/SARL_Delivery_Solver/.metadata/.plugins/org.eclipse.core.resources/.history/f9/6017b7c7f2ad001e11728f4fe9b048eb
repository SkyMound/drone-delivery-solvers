package drone_delivery.solver

import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Lifecycle
import java.util.concurrent.ConcurrentHashMap
import java.util.UUID
import io.sarl.api.core.Initialize
import org.arakhne.afc.math.geometry.d2.d.Vector2d


agent Environment{
	uses Logging,Schedules, DefaultContextInteractions, Lifecycle
	
	var width : int 
	var height : int 
	
	var drones : ConcurrentHashMap<UUID,PerceivedDroneBody>
	var time : int
	
	on Initialize {
		loggingName = "Environment"
	if (occurrence.parameters.size > 1) {
		if (occurrence.parameters.get(0) instanceof Integer) {
			height = occurrence.parameters.get(0) as Integer
		}

		if (occurrence.parameters.get(1) instanceof Integer) {
			width = occurrence.parameters.get(1) as Integer
			}
		}
		drones=null
		
	}
	
	on Start{
		this.drones = occurrence.perceivedAgentBody
		new GuiRepaint(drones).emit
		new Perception(drones,time).emit
	}

	on Die {
		killMe
	}

	def applyForce(force : Vector2d, b : PerceivedBoidBody) {
		// limiting/clamping the applied force
		if (force.length > b.group.maxForce) {
			force.length = b.group.maxForce
		}

		// contribution of the mass.
		// force * (1 / b.getGroupe().masse);
		// updating acceleration and speed.
		var acceleration = b.acceleration
		acceleration.set(force)
		var vitesse = b.vitesse
		vitesse += acceleration

		// updating speed
		if (vitesse.length > b.group.maxSpeed) {
			vitesse.length = b.group.maxSpeed
		}

		// updating the position
		var position = b.position
		position += vitesse

		var bb = boids.get(b.owner)
		bb.acceleration = acceleration
		bb.vitesse = vitesse
		bb.position = position

		// we adjust it according to the dimensions of the World.
		b.clampToWorld
	}

	/** 
	 * The world is circular, this function clamps coordinates to stay within the frame
	 */
	def clampToWorld(b : PerceivedDroneBody) {
		var posX = b.position.x
		var posY = b.position.y

		if (posX > width / 2) {
			posX -= width
		}
		if (posX < ( -1 * width / 2 )) {
			posX += width
		}
		if (posY > height / 2) {
			posY -= height
		}
		if (posY < ( -1 * height / 2 )) {
			posY += height
		}

		drones.get(b.owner).position = new Vector2d(posX, posY)
	}

}
