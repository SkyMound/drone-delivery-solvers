
package drone_delivery.solver

import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import org.eclipse.xtend.lib.annotations.Accessors
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/**
 * Event from the GUI to kill each agent to end the simulation before closing the main window
 */
event Die


event Action {
	var influence : Vector2d
}


event Perception {
	//TODO si y en a besoin 
}


event Start {
	val perceivedAgentBody : ConcurrentHashMap<UUID, PerceivedBoidBody>

	new (bodies : ConcurrentHashMap<UUID, PerceivedBoidBody>) {
		perceivedAgentBody = new ConcurrentHashMap<UUID, PerceivedBoidBody>(bodies);
	}
	
}

//TODO vérifier l'utilistée
event GuiRepaint {
	val perceivedAgentBody : ConcurrentHashMap<UUID, PerceivedBoidBody>

	new (bodies : ConcurrentHashMap<UUID, PerceivedBoidBody>) {
		perceivedAgentBody = new ConcurrentHashMap<UUID, PerceivedBoidBody>(bodies);
	}

}


class PerceivedBoidBody {

	// Position of the body
	@Accessors
	var position : Vector2d

	// Address of the body's owner
	@Accessors
	var owner : UUID

	// Agent's speed
	@Accessors
	var vitesse : Vector2d

	// Acceleration
	@Accessors
	var acceleration : Vector2d

	// Population of the agent
	@Accessors
	var group : Population

	new (igroup : Population, iowner : UUID, iposition : Vector2d, ispeed : Vector2d) {
		position = iposition
		owner = iowner
		vitesse = ispeed
		acceleration = new Vector2d
		group = igroup
	}

}
