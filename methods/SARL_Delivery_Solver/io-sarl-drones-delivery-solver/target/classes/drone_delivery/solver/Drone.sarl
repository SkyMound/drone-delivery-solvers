package drone_delivery.solver

import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import java.util.Collection
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import java.util.Vector
import org.eclipse.xtend.lib.annotations.Accessors

enum Objectiv {
	GoLiv,
	BackLiv,
	Charge
}

/** 
 * 
 * 
 */
agent Drone {
	uses Logging, DefaultContextInteractions, Schedules, Lifecycle

	// ID of the environmental agent
	var environment : UUID

	@Accessors
	var position : Vector2d

	var speed : Vector2d
	var battery : float 
	@Accessors
	var weight : float
	
	var targetPos : Vector2d
	
	var objectiv : Objectiv
	
	var parcel : Parcel

	on Initialize {
		// Drones init parameters : UUID envt, Vector2d initialPosition, initSpeed, objectiv, targetPos, battery, String droneName
		if (occurrence.parameters.size > 6) {
			if (occurrence.parameters.get(0) instanceof UUID) {
				environment = occurrence.parameters.get(0) as UUID
			}
			if (occurrence.parameters.get(1) instanceof Vector2d) {
				position = occurrence.parameters.get(1) as Vector2d
			}
			if (occurrence.parameters.get(2) instanceof Vector2d) {
				speed = occurrence.parameters.get(2) as Vector2d
			}
			if (occurrence.parameters.get(3) instanceof Objectiv) {
				objectiv = occurrence.parameters.get(3) as Objectiv
			}
			if (occurrence.parameters.get(4) instanceof Vector2d) {
				targetPos = occurrence.parameters.get(4) as Vector2d
			}
			if (occurrence.parameters.get(5) instanceof Float) {
				battery = occurrence.parameters.get(5) as Float
			}
			if (occurrence.parameters.get(6) instanceof String) {
				loggingName = occurrence.parameters.get(6) as String
			}
			
			
			parcel = null

		}
		if (Settings::isLogActivated) {
			"Boids activated".info
		}
		
	}
	
	on Die{
		info(" is dying while " + this.objectiv)
	}
	
	def closeEnoughToTarget(v1 : Vector2d, v2 : Vector2d) {
		var distanceMin = Settings::distMinLiv
		var distance = Math.sqrt(Math.pow(v2.x - v1.x, 2) + Math.pow(v2.y - v1.y, 2));
		return distance <= distanceMin;
	}
	
	on UpdateAction {
		var myBody = occurrence.perceivedAgentBody.get(this.ID)
		if ((myBody !== null) && (myBody.owner == this.ID)) {
			// Update drones' speed and position according to the new environmental data
			this.position = myBody.position
			this.speed = myBody.vitesse
			//info("Le drone = " + ID + "est en " + position + " avec un vitesse de "+ speed)
		}

		in(Settings::pause) [
			var influence = new Vector2d
		
			if (this.objectiv == Objectiv.Charge) {
				if(this.battery <= 100- Settings::SecondsPerCycle * Settings::ChargePerSec){
					this.battery += Settings::SecondsPerCycle * Settings::ChargePerSec
				}
			}
			
			else if (this.objectiv == Objectiv.BackLiv) {
					
					if (closeEnoughToTarget(this.position, this.targetPos)) {
						info(" est rentré au dépot et se met en charge")
						this.objectiv = Objectiv.Charge
						this.targetPos = null
						this.battery =0.0f
					}
					else {
						influence = moveTo(this.targetPos)
					}
			} 
			
			else if (this.objectiv == Objectiv.GoLiv) {
				if (closeEnoughToTarget(this.position, this.targetPos)) {
					info(" est assez proche de sa cible")
					emit(new ParcelDelivered(occurrence.time - this.parcel.ordertime))
					
					this.objectiv = Objectiv.BackLiv
					this.targetPos = occurrence.depotPos
					this.parcel = null
					influence = moveTo(this.targetPos)
				} 
				else {
					influence = moveTo(this.targetPos)
				}
			}
			myBody.battery=this.battery
			myBody.objectiv = this.objectiv
			myBody.targetPos = this.targetPos				
			emit(new Action(influence,myBody))
		]
	}
	
	
	on AffectOrder{
		this.parcel = occurrence.affectedparcel
		this.targetPos = parcel.getHousePos()
		this.objectiv = Objectiv.GoLiv
	}
	
	
	private def moveTo(targetPos : Vector2d) {
		this.battery -= Settings::SecondsPerCycle * Settings::BatteryLostPerSec
		
		var slowDownDistance = 2 * Settings::DroneMaxSpeed * Settings::SecondsPerCycle
		
		var vector = targetPos - position
		if (vector.length <= slowDownDistance){
			val timeToTarget = slowDownDistance / norm(vector)
			vector.length = vector.length/timeToTarget
		}
		else {
			vector.length = Settings::DroneMaxSpeed * Settings::SecondsPerCycle
		}
		
		return vector
	}
	
	private def norm(vector : Vector2d) {
		return Math.sqrt(vector.x * vector.x + vector.y * vector.y)
	}
}
